"use client"; // Ensure this is a Client Component

import { useEffect, useState, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Image from 'next/image';

function ResultContent() {
  const searchParams = useSearchParams();
  const type = searchParams.get('type');
  const sound = searchParams.get('sound');
  const [resultText, setResultText] = useState('');
  const [songSuggestion, setSongSuggestion] = useState('');
  const [soundSrc, setSoundSrc] = useState('');

  useEffect(() => {
    if (!type || !sound) return;

    let chosenSoundSrc = '';

    // Determine the result based on the MBTI type
    switch (type) {
      case 'ESTJ':
        setResultText('Mark Ronson - Uptown Funk');
        setSongSuggestion("Girls hit your hallelujah (Woo) Girls hit your hallelujah (Woo) Girls hit your hallelujah (Woo)");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Uptown Funk ft. Bruno Mars.mp3' : chosenSoundSrc;
        break;
      case 'ESFJ':
        setResultText('Pharrell Williams - Happy');
        setSongSuggestion("It might seem crazy what I'm about to say");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Pharrell Williams Happy.mp3' : chosenSoundSrc;
        break;
      case 'ENFJ':
        setResultText('CAN\'T STOP THE FEELING');
        setSongSuggestion("I got this feelin' inside my bones It goes electric, wavey when I turn it on");
        chosenSoundSrc = sound === 'playMusic' ? "/musics/Can't Stop the Feeling from Trolls.mp3" : chosenSoundSrc;
        break;
      case 'ENTJ':
        setResultText('Kendrick Lamar - HUMBLE');
        setSongSuggestion("Tell 'em, be humble (hol' up) Sit down (hol' up, hol' up, lil', hol' up) Be humble (hol' up)");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Humble.mp3' : chosenSoundSrc;
        break;
      case 'ISTJ':
        setResultText('Hotel California');
        setSongSuggestion('Welcome to the Hotel CaliforniaSuch a lovely place such a lovely place Such a lovely face');
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Hotel California 2013 Remaster.mp3' : chosenSoundSrc;
        break;
      case 'ISFJ':
        setResultText('Here Comes the Sun');
        setSongSuggestion("Here comes the sun, doo-doo-doo-doo Here comes the sun, and I say It's alright");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Here Comes The Sun 2019 Mix.mp3' : chosenSoundSrc;
        break;
      case 'INFJ':
        setResultText('John Lennon - Imagine');
        setSongSuggestion("Imagine there's no heaven It's easy if you try No hell below us Above us, only sky");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Imagine Ultimate Mix.mp3' : chosenSoundSrc;
        break;
      case 'INTJ':
        setResultText('Kendrick Lamar - DNA.');
        setSongSuggestion("I got, I got, I got, I got Loyalty, got royalty inside my DNA Quarter piece, got war, and peace inside my DNA");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Kendrick Lamar DNA.mp3' : chosenSoundSrc;
        break;
      case 'ISTP':
        setResultText('Sicko Mode');
        setSongSuggestion('Woo, made this here with all the ice on in the booth At the gate outside, when they pull up, they get me loose');
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Travis Scott SICKO MODE.mp3' : chosenSoundSrc;
        break;
      case 'ISFP':
        setResultText('drivers license');
        setSongSuggestion("I got my driver's license last week Just like we always talked about");
        chosenSoundSrc = sound === 'playMusic' ? "/musics/YouTube drivers license.mp3" : chosenSoundSrc;
        break;
      case 'INFP':
        setResultText('Hozier - Cherry Wine');
        setSongSuggestion('Her eyes and words are so icy Oh but she burns Like rum on the fire');
        chosenSoundSrc = sound === 'playMusic' ? "/musics/Hozier Cherry Wine.mp3" : chosenSoundSrc;
        break;
      case 'INTP':
        setResultText('Numb');
        setSongSuggestion("I've become so numb, I can't feel you there Become so tired, so much more aware");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/YTMP3 Numb.mp3' : chosenSoundSrc;
        break;
      case 'ESTP':
        setResultText("God's Plan'");
        setSongSuggestion("God's plan, God's plan I hold back, sometimes I won't, yeah I feel good, sometimes I don't, ayy, don't");
        chosenSoundSrc = sound === 'playMusic' ? "/musics/God's Plan.mp3" : chosenSoundSrc;
        break;
      case 'ESFP':
        setResultText('DANCE MONKEY');
        setSongSuggestion("They say, oh my God I see the way you shine Take your hand, my dear, and place them both in mine");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Dance Monkey Lyrics.mp3' : chosenSoundSrc;
        break;
      case 'ENFP':
        setResultText('Levitating');
        setSongSuggestion("If you wanna run away with me, I know a galaxy And I can take you for a ride");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Dua Lipa Levitating Lyrics.mp3' : chosenSoundSrc;
        break;
      case 'ENTP':
        setResultText('Kanye West - Stronger');
        setSongSuggestion("N-Now-Now that, that don't kill me Can only make me stronger");
        chosenSoundSrc = sound === 'playMusic' ? '/musics/Stronger from YTMP3.mp3' : chosenSoundSrc;
        break;
      default:
        setResultText('We could not determine your personality.');
        setSongSuggestion('Try taking the quiz again!');
        chosenSoundSrc = '';
    }

    // If the user selected "playAmbient", override with ambient music
    if (sound === 'playAmbient') {
      chosenSoundSrc = '/musics/Dawn by Sappheiros.mp3'; // Replace with the path to your ambient music
    }

    setSoundSrc(chosenSoundSrc);

    return () => {
      const audio = new Audio(chosenSoundSrc);
      audio.pause();
      audio.currentTime = 0;
    };
  }, [type, sound]);

  return (
    <div className="flex justify-center h-screen bg-white">
      <div
        className="flex flex-col max-w-md w-full h-full justify-center items-center bg-cover bg-center bg-white"
        style={{ backgroundImage: "url('/images/Poster subheading.png')" }}
      >
        <div className="flex flex-col items-center max-w-md w-3/4 bg-white opacity-90 p-6 rounded-xl shadow-md">
          <h1 className="text-2xl text-center font-bold mb-4">Recommend: {resultText}</h1>
          <p className="text-md text-center px-4 mb-4">&#127925; {songSuggestion}</p>
          <div className="flex flex-col items-center">
            <Image
              src="/images/Poster design (1).png"
              width={200}
              height={200}
              alt="pic"
            />
            {soundSrc && (
              <audio controls autoPlay className="mt-4">
                <source src={soundSrc} type="audio/mp3" />
                Your browser does not support the audio element.
              </audio>
            )}
            <button
              className="mt-6 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg"
              onClick={() => window.location.href = '/'}
            >
              Take the Quiz Again
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function Result() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <ResultContent />
    </Suspense>
  );
}
